{{#if needInquirer}}
const { prompt, notNumberRule } = require("../../utils/inquirer");
{{/if}}
const CmdList = require("../../bin/handleCmdList");
const log = require("../../utils/log");
const path = require("path");

module.exports = async (_, options = {}) => {
  let cliName, config;

  {{#if needInquirer}}
  let $1;
  {{/if}}

  // 初始化变量
  const initVar = (answers) => {
    config = answers.config;

    cliName = CmdList.getCliName();

    {{#if needInquirer}}
    $1 = answers.$1;
    {{/if}}
  };

  const runMain = async () => {
    // 运行命令...
  };

  // 主流程 - step 集合
  const mainStepList = [
    {
      fun: runMain,
      desc: () => "运行",
    },
  ];

  // todo 流程 - step 集合
  const todoStepList = [
    // {
    //   desc: () => "todo...",
    // },
  ];

  {{#if needConfig}}
  // 生成当前配置对应的 prompt
  const createConfigPromptList = (config) => {
    const promptList = [];

    const $2Prompt = {
      type: "input",
      name: "config.$2",
      message: "请输入:",
      validate: notNumberRule,
    };

    if (!config.$2) promptList.push($2Prompt);

    return promptList
  };
  {{/if}}

  return {
    {{#if needInquirer}}
    async prompt(...args) {
      const config = args.pop(); // 最后一个为配置项

      {{#if needConfig}}
      const reset = args[0] === "reset";

      if (reset) args.shift(); // 若需要重置，则将第一个参数删除掉

      const promptList = createConfigPromptList(reset ? {} : config);
      // promptList 按情况使用

      {{/if}}
      const [arg] = args;

      let answers = {};
      
      answers = await prompt([
        {
          type: "input",
          name: "$1",
          message: "请输入:",
          validate: notNumberRule,
        },
      ]);

      return answers;
    },
    {{/if}}
    initVar,
    mainStepList,
    todoStepList,
  };
};
