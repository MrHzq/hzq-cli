{{#if needInquirer}}
const { prompt, notNumberRule, requireRule } = require("../../utils/inquirer");
{{/if}}
const CmdList = require("../../bin/handleCmdList");
const log = require("../../utils/log");
const { getDirName, getCmdName } = require("../../utils/path");
const { getValueByPath } = require("../../utils/common");
{{#if needLs}}
const { getFileList } = require("../../utils/fs");
const Spinner = require("../../utils/spinner");
{{/if}}
{{#if needMuteConfig}}

const needMuteConfig = true; // 一个 key 是否存在多个
{{/if}}
{{#if configByProject}}

const configByProject = true; // 配置项是否以“项目”维度
{{/if}}

module.exports = async (_, options = {}) => {
  const {
    _name = getDirName(__dirname),
    _cmdName = getCmdName(),
    _description,
  } = options;

  let cliName, config, configType;
{{#if needMuteConfig}}

  let currPromptKey = "$2";
{{/if}}
{{#if needInquirer}}
{{#if needLs}}

  let filePathList, successList;
{{else}}
  let $1;
{{/if}}
{{/if}}

  // 初始化变量
  const initVar = (answers) => {
    config = answers.config;
{{#if configByProject}}
    if (configByProject) config = config[_cmdName];
{{/if}}
{{#if needMuteConfig}}

    if (answers.currPromptKey) currPromptKey = answers.currPromptKey;
{{/if}}

    cliName = CmdList.getCliName();
{{#if needInquirer}}
{{#if needLs}}

    filePathList = answers.filePathList;

    successList = [];
{{else}}

    $1 = answers.$1;
{{/if}}
{{/if}}
  };

  const runMain = async () => {
    // 运行命令...
{{#if needLs}}
    if (!Array.isArray(filePathList)) filePathList = [filePathList];

    const total = filePathList.length;

    if (total === 0) return "未找到文件";

    const forLoading = new Spinner();

    for (let i = 0; i < total; i++) {
      forLoading.start(`当前进度: ${i + 1}/${total}`);

      const forItem = filePathList[i];


      const { success, res } = {} // await imageToIco(params);
      if (success) {
        successList.push(res);
      }
    }

    forLoading.stop();

    return {
      success: successList.length > 0,
      tip: log.batchLog(filePathList, successList),
    };
{{/if}}
  };

  // 主流程 - step 集合
  const mainStepList = [
    {
      fun: runMain,
      desc: () => _description,
    },
  ];

  // todo 流程 - step 集合
  const todoStepList = [
    // {
    //   desc: () => "todo...",
    // },
  ];

{{#if needConfig}}
  // 生成当前配置对应的 prompt
  const createConfigPromptList = (_config) => {
    const promptList = [];

    const configKeys = Object.keys(_config);
    const configLen = configKeys.length;
{{#if needMuteConfig}}

    let isChoices = Boolean(configLen);

    if (["reset", "add"].includes(configType)) isChoices = false;

    if (needMuteConfig && configType === "add" && configLen) {
      currPromptKey = currPromptKey + configLen;
    }
{{/if}}

    if (!configLen) configType = "add";
{{#if configByProject}}

    if (configByProject) {
      if (!_config[_cmdName]) configType = "add";
    }
{{/if}}
{{#if needMuteConfig}}

    let $2Prompt = {
      type: "input",
      name: `config.${currPromptKey}`,
      message: "请输入$配置:",
      validate: notNumberRule,
    };

    if (isChoices) {
      $2Prompt = {
        type: "list",
        name: "config.$2",
        message: "请选择$配置:",
        choices: configKeys.map((key) => ({
          name: config[key],
          value: config[key],
        })),
      };
    }
    promptList.push($2Prompt);
{{else}}
    const createPromptName = (key) => {
{{#if configByProject}}
      return ["config", _cmdName, key]
{{else}}
      return ["config", key]
{{/if}}
        .filter(Boolean)
        .join(".");
    };

    const $2Prompt = {
      type: "input",
      name: createPromptName("$2"), // config.??.$2
      message: "请输入:",
      validate: notNumberRule,
    };

    if (["reset", "add"].includes(configType)) {
      promptList.push($2Prompt);
    } else {
      if (!getValueByPath({ config: _config }, $2Prompt.name)) {
        promptList.push($2Prompt);
        configType = "add";
      }
    };
{{/if}}

    return promptList;
  };
{{/if}}

  return {
{{#if needInquirer}}
    // 第一个 _config 为配置项
    async prompt(_config, ...args) {
{{#if needConfig}}
      configType = args.at(-1);

      if (["reset", "add"].includes(configType)) args.pop(); // 若需要重置/新增，则将最后一个参数删除掉

      // configPromptList 按情况使用
      const configPromptList = createConfigPromptList(_config, configType);
{{/if}}
      const promptList = [
        //...configPromptList
      ];

      let [arg] = args;
{{#if needLs}}

      const needList = arg === "ls";

      if (needList) arg = "";

      const defaultFilterList = [];
      const defaultIgnoreList = [];

      const choices = getFileList(
        defaultFilterList.join("||"),
        defaultIgnoreList.join("||")
      );
{{/if}}

      let answers = {};

      let firstPrompt = {
        type: "input",
{{#if needLs}}
        name: "filePathList",
{{else}}
        name: "$1",
{{/if}}
        message: "请输入:",
        validate: notNumberRule,
      };
{{#if needLs}}

      if (needList && choices.length) {
        promptList.push({
          type: "checkbox",
          name: "filePathList",
          message: `请选择文件(可选${choices.length}个):`,
          choices,
          validate: requireRule,
        });
      }
{{/if}}

      promptList.push(firstPrompt);

      answers = await prompt(promptList);
{{#if needConfig}}

      answers.configType = configType;
{{/if}}
{{#if needMuteConfig}}

      answers.currPromptKey = currPromptKey;
{{/if}}

      return answers;
    },
{{/if}}
    initVar,
    mainStepList,
    todoStepList,
{{#if needMuteConfig}}
    needMuteConfig,
{{/if}}
  };
};
