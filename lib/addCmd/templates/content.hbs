{{#if needInquirer}}
const { prompt, notNumberRule } = require("../../utils/inquirer");
{{/if}}
const CmdList = require("../../bin/handleCmdList");
const log = require("../../utils/log");
const { getDirName, getCmdName } = require("../../utils/path");

{{#if needMuteConfig}}
const oneKeyHasMute = true; // 一个 key 是否存在多个
{{/if}}

{{#if configByProject}}
const configByProject = true; // 配置项是否以“项目”维度
{{/if}}

module.exports = async (_, options = {}) => {
  const {
    _name = getDirName(__dirname),
    _cmdName = getCmdName(),
    _description,
  } = options;

  let cliName, config, configType;

{{#if needMuteConfig}}
  let currPromptKey = "$2";
{{/if}}


{{#if needInquirer}}
  let $1;
{{/if}}

  // 初始化变量
  const initVar = (answers) => {
    config = answers.config;
{{#if configByProject}}
    if (configByProject) config = config[_cmdName];
{{/if}}

{{#if needMuteConfig}}
    if (answers.currPromptKey) currPromptKey = answers.currPromptKey;
{{/if}}

    cliName = CmdList.getCliName();

{{#if needInquirer}}
    $1 = answers.$1;
{{/if}}
  };

  const runMain = async () => {
    // 运行命令...
  };

  // 主流程 - step 集合
  const mainStepList = [
    {
      fun: runMain,
      desc: () => _description,
    },
  ];

  // todo 流程 - step 集合
  const todoStepList = [
    // {
    //   desc: () => "todo...",
    // },
  ];

{{#if needConfig}}
  // 生成当前配置对应的 prompt
  const createConfigPromptList = (config) => {
    const promptList = [];

    const configKeys = Object.keys(config);
    const configLen = configKeys.length;

    const createPromptName = (key) => {
      return ["config", configByProject ? _cmdName : "", key]
        .filter(Boolean)
        .join(".");
    };
{{#if needMuteConfig}}
    let isChoices = Boolean(configLen);

    if (["reset", "add"].includes(configType)) isChoices = false;

    if (oneKeyHasMute && configType === "add" && configLen) {
      currPromptKey = "cliTemDir" + configLen;
    }
{{/if}}

    if (!configLen) configType = "add";

    if (configByProject) {
      if (!config[_cmdName]) configType = "add";
    }

{{#if needMuteConfig}}
    let $2Prompt = {
      type: "input",
      name: `config.${currPromptKey}`,
      message: "请输入项目目录:",
      validate: notNumberRule,
    };

    if (isChoices) {
      $2Prompt = {
        type: "list",
        name: "config.$2",
        message: "请选择项目目录:",
        choices: configKeys.map((key) => ({
          name: config[key],
          value: config[key],
        })),
      };
    }
    promptList.push(cliTemDirPrompt);
{{else}}
    const $2Prompt = {
      type: "input",
      name: createPromptName("$2"),
      message: "请输入:",
      validate: notNumberRule,
    };

    if (["reset", "add"].includes(configType)) {
      promptList.push($2Prompt);
    }
{{/if}}

    return promptList;
  };
{{/if}}

  return {
{{#if needInquirer}}
    // 第一个 _config 为配置项
    async prompt(_config, ...args) {
{{#if needConfig}}
      configType = args[0];

      if (["reset", "add"].includes(configType)) args.shift(); // 若需要重置/新增，则将第一个参数删除掉

      // promptList 按情况使用
      const promptList = createConfigPromptList(_config, configType);
{{/if}}

      const [arg] = args;

      let answers = {};

      answers = await prompt([
        {
          type: "input",
          name: "$1",
          message: "请输入:",
          validate: notNumberRule,
        },
{{#if needConfig}}
        // ...promptList,
{{/if}}
      ]);

{{#if needConfig}}
      answers.configType = configType;
{{/if}}
{{#if needMuteConfig}}
      answers.currPromptKey = currPromptKey;
{{/if}}

      return answers;
    },
{{/if}}
    initVar,
    mainStepList,
    todoStepList,
{{#if needMuteConfig}}
    oneKeyHasMute,
{{/if}}
  };
};
